Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n\r\n    <groupId>org.example</groupId>\r\n    <artifactId>Easy-Vote</artifactId>\r\n    <version>1.0-SNAPSHOT</version>\r\n\r\n    <properties>\r\n        <maven.compiler.source>21</maven.compiler.source>\r\n        <maven.compiler.target>21</maven.compiler.target>\r\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n    </properties>\r\n\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pom.xml b/pom.xml
--- a/pom.xml	(revision 3fcf3fc36d14a9611c5ff8ad58c3cadd9295db82)
+++ b/pom.xml	(date 1713735460437)
@@ -8,6 +8,15 @@
     <artifactId>Easy-Vote</artifactId>
     <version>1.0-SNAPSHOT</version>
 
+    <dependencies>
+        <dependency>
+            <groupId>org.junit.jupiter</groupId>
+            <artifactId>junit-jupiter-api</artifactId>
+            <version>5.8.0</version>
+            <scope>test</scope>
+        </dependency>
+    </dependencies>
+
     <properties>
         <maven.compiler.source>21</maven.compiler.source>
         <maven.compiler.target>21</maven.compiler.target>
Index: src/main/java/org/example/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example;\r\n\r\nimport java.util.*;\r\n\r\npublic class Main {\r\n    private static int contadorVotaciones = 1;\r\n    private static Map<String, Votacion> votaciones = new HashMap<>();\r\n\r\n\r\n    public static void main(String[] args) {\r\n\r\n        Map<String, String> usuariosContraseñas = new HashMap<>();\r\n        usuariosContraseñas.put(\"123456789\", \"contraseña1\");\r\n        usuariosContraseñas.put(\"987654321\", \"contraseña2\");\r\n\r\n        String usuarioValidado = ingresarUsuario(usuariosContraseñas);\r\n\r\n        if (usuarioValidado != null) {\r\n            System.out.println(\"Usuario y contraseña válidos. Bienvenido, \" + usuarioValidado + \"!\");\r\n            mostrarMenu();\r\n        } else {\r\n            System.out.println(\"Usuario o contraseña incorrectos. Inténtelo nuevamente.\");\r\n        }\r\n    }\r\n\r\n    public static String ingresarUsuario(Map<String, String> usuariosContraseñas) {\r\n        Scanner scanner = new Scanner(System.in);\r\n\r\n        while (true) {\r\n            System.out.print(\"Ingrese el usuario: \");\r\n            String usuario = scanner.nextLine();\r\n            System.out.print(\"Ingrese la contraseña: \");\r\n            String contraseña = scanner.nextLine();\r\n\r\n            if (validarUsuario(usuario, contraseña, usuariosContraseñas)) {\r\n                return usuario;\r\n            } else {\r\n                System.out.println(\"Usuario o contraseña incorrectos. Inténtelo nuevamente.\");\r\n            }\r\n        }\r\n    }\r\n    public static boolean validarUsuario(String usuario, String contraseña, Map<String, String> usuariosContraseñas) {\r\n        String contraseñaAlmacenada = usuariosContraseñas.get(usuario);\r\n        return contraseñaAlmacenada != null && contraseñaAlmacenada.equals(contraseña);\r\n    }\r\n    public static void mostrarMenu() {\r\n        Scanner scanner = new Scanner(System.in);\r\n\r\n        System.out.println(\"Seleccione una opción:\");\r\n        System.out.println(\"1. Crear una votación\");\r\n        System.out.println(\"2. Votar en una votación existente\");\r\n        int opcion = leerEntero(scanner, \"Ingrese el número de la opción deseada: \");\r\n\r\n        switch (opcion) {\r\n            case 1:\r\n                System.out.println(\"Ha elegido crear una votación.\");\r\n                crearVotacion(scanner);\r\n                break;\r\n            case 2:\r\n                System.out.println(\"Ha elegido votar en una votación existente.\");\r\n                mostrarVotacionesDisponibles();\r\n                votarEnVotacionExistente(scanner);\r\n                break;\r\n            default:\r\n                System.out.println(\"Opción inválida. Por favor, ingrese 1 o 2.\");\r\n        }\r\n    }\r\n    public static void crearVotacion(Scanner scanner) {\r\n        System.out.println(\"Creación de votación:\");\r\n\r\n        // Leer la pregunta de la votación\r\n        System.out.print(\"Ingrese la pregunta de la votación: \");\r\n        String pregunta = scanner.nextLine();\r\n\r\n        // Leer el número de opciones\r\n        int numOpciones = leerEntero(scanner, \"Ingrese el número de opciones: \");\r\n\r\n        // Leer las opciones\r\n        List<String> opciones = new ArrayList<>();\r\n        for (int i = 0; i < numOpciones; i++) {\r\n            System.out.print(\"Ingrese la opción \" + (i + 1) + \": \");\r\n            opciones.add(scanner.nextLine());\r\n        }\r\n\r\n        // Mostrar resumen de la votación\r\n        System.out.println(\"Resumen de la votación:\");\r\n        System.out.println(\"Pregunta: \" + pregunta);\r\n        System.out.println(\"Opciones:\");\r\n        for (int i = 0; i < opciones.size(); i++) {\r\n            System.out.println((i + 1) + \". \" + opciones.get(i));\r\n        }\r\n\r\n        // Guardar votacion, de momento sin csv\r\n        // Crear la votación y agregarla al Map\r\n        Votacion nuevaVotacion = new Votacion(pregunta, opciones);\r\n        String idVotacion = \"V\" + contadorVotaciones++;\r\n        votaciones.put(idVotacion, nuevaVotacion);\r\n\r\n        System.out.println(\"Votación creada con éxito. ID de votación: \" + idVotacion);\r\n\r\n        // Mostrar el menú nuevamente\r\n        mostrarMenu();\r\n    }\r\n    public static void mostrarVotacionesDisponibles() {\r\n        System.out.println(\"Votaciones disponibles:\");\r\n        for (String id : votaciones.keySet()) {\r\n            Votacion votacion = votaciones.get(id);\r\n            System.out.println(id + \": \" + votacion.getPregunta());\r\n        }\r\n    }\r\n    public static void votarEnVotacionExistente(Scanner scanner) {\r\n        while (true) {\r\n            System.out.print(\"Ingrese el ID de la votación en la que desea votar: \");\r\n            String idVotacion = scanner.nextLine();\r\n\r\n            Votacion votacion = votaciones.get(idVotacion);\r\n            if (votacion == null) {\r\n                System.out.println(\"No se encontró la votación con ese ID. Inténtelo nuevamente.\");\r\n            } else {\r\n                System.out.println(\"Votación seleccionada: \" + votacion.getPregunta());\r\n                System.out.println(\"Opciones:\");\r\n                List<String> opciones = votacion.getOpciones();\r\n                for (int i = 0; i < opciones.size(); i++) {\r\n                    System.out.println((i + 1) + \". \" + opciones.get(i));\r\n                }\r\n\r\n                int opcionVotada = leerEntero(scanner, \"Ingrese el número de la opción que desea votar: \");\r\n                if (opcionVotada < 1 || opcionVotada > opciones.size()) {\r\n                    System.out.println(\"Opción inválida. Por favor, ingrese un número válido.\");\r\n                } else {\r\n                    // Aquí puedes registrar el voto del usuario en la opción seleccionada\r\n                    System.out.println(\"Voto registrado correctamente.\");\r\n                    break; // Salir del bucle una vez que se registra el voto correctamente\r\n                }\r\n            }\r\n        }\r\n    }\r\n    static class Votacion {\r\n        private String pregunta;\r\n        private List<String> opciones;\r\n        public Votacion(String pregunta, List<String> opciones) {\r\n            this.pregunta = pregunta;\r\n            this.opciones = opciones;\r\n        }\r\n        public String getPregunta() {\r\n            return pregunta;\r\n        }\r\n        public List<String> getOpciones() {\r\n            return opciones;\r\n        }\r\n    }\r\n\r\n    public static int leerEntero(Scanner scanner, String mensaje) {\r\n        int numero = 0;\r\n        boolean entradaValida = false;\r\n\r\n        while (!entradaValida) {\r\n            try {\r\n                System.out.print(mensaje);\r\n                numero = scanner.nextInt();\r\n                entradaValida = true;\r\n            } catch (InputMismatchException e) {\r\n                System.out.println(\"Error: Debes ingresar un número entero.\");\r\n                scanner.next(); // Limpiar el búfer del scanner para evitar un bucle infinito\r\n            }\r\n            scanner.nextLine(); // Consumir la nueva línea en blanco, para que no consuma dos scanner\r\n        }\r\n        return numero;\r\n    }\r\n\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/Main.java b/src/main/java/org/example/Main.java
--- a/src/main/java/org/example/Main.java	(revision 3fcf3fc36d14a9611c5ff8ad58c3cadd9295db82)
+++ b/src/main/java/org/example/Main.java	(date 1713739599472)
@@ -1,13 +1,19 @@
 package org.example;
 
+import java.io.IOException;
+import java.nio.file.*;
+import java.io.*;
 import java.util.*;
 
 public class Main {
+    private static final String NOMBRE_ARCHIVO = "votaciones.txt";
+    private static final String NOMBRE_ARCHIVO_VOTOS = "votos.txt";
     private static int contadorVotaciones = 1;
     private static Map<String, Votacion> votaciones = new HashMap<>();
 
 
     public static void main(String[] args) {
+        verificarVotaciones();
 
         Map<String, String> usuariosContraseñas = new HashMap<>();
         usuariosContraseñas.put("123456789", "contraseña1");
@@ -65,6 +71,26 @@
                 System.out.println("Opción inválida. Por favor, ingrese 1 o 2.");
         }
     }
+    private static void cargarVotacionesDesdeArchivo() {
+        try (BufferedReader br = new BufferedReader(new FileReader(NOMBRE_ARCHIVO))) {
+            String linea;
+            while ((linea = br.readLine()) != null) {
+                // Parsear la línea para obtener los detalles de la votación
+                String[] partes = linea.split(",");
+                String id = partes[0];
+                String pregunta = partes[1];
+                List<String> opciones = Arrays.asList(partes).subList(2, partes.length);
+
+                // Agregar la votación al mapa de votaciones si no existe previamente
+                if (!votaciones.containsKey(id)) {
+                    votaciones.put(id, new Votacion(pregunta, opciones));
+                }
+            }
+        } catch (IOException e) {
+            // Manejar errores de lectura del archivo
+            e.printStackTrace();
+        }
+    }// IMPLEMENTAR PARA LEER LAS VOTACIONES Y VOTAR
     public static void crearVotacion(Scanner scanner) {
         System.out.println("Creación de votación:");
 
@@ -97,10 +123,24 @@
         votaciones.put(idVotacion, nuevaVotacion);
 
         System.out.println("Votación creada con éxito. ID de votación: " + idVotacion);
-
+        guardarVotacionesEnArchivo();
         // Mostrar el menú nuevamente
         mostrarMenu();
     }
+    private static void guardarVotacionesEnArchivo() {
+        try (PrintWriter pw = new PrintWriter(new FileWriter(NOMBRE_ARCHIVO))) {
+            for (Map.Entry<String, Votacion> entry : votaciones.entrySet()) {
+                String id = entry.getKey();
+                Votacion votacion = entry.getValue();
+                String linea = id + "," + votacion.getPregunta() + "," + String.join(",", votacion.getOpciones());
+                pw.println(linea);
+            }
+        } catch (IOException e) {
+            // Manejar errores de escritura en el archivo
+            e.printStackTrace();
+        }
+    }
+
     public static void mostrarVotacionesDisponibles() {
         System.out.println("Votaciones disponibles:");
         for (String id : votaciones.keySet()) {
@@ -129,12 +169,29 @@
                     System.out.println("Opción inválida. Por favor, ingrese un número válido.");
                 } else {
                     // Aquí puedes registrar el voto del usuario en la opción seleccionada
+                    registrarVoto(idVotacion, opcionVotada);
                     System.out.println("Voto registrado correctamente.");
                     break; // Salir del bucle una vez que se registra el voto correctamente
                 }
             }
         }
     }
+    private static void registrarVoto(String idVotacion, int opcionVotada) {
+        try {
+            // Verificar si el archivo de votos existe, y crearlo si no existe
+            if (!Files.exists(Paths.get(NOMBRE_ARCHIVO_VOTOS))) {
+                Files.createFile(Paths.get(NOMBRE_ARCHIVO_VOTOS));
+            }
+
+            // Escribir el voto en el archivo de votos
+            try (PrintWriter pw = new PrintWriter(new FileWriter(NOMBRE_ARCHIVO_VOTOS, true))) {
+                pw.println(idVotacion + "," + opcionVotada);
+            }
+        } catch (IOException e) {
+            System.err.println("Error al registrar el voto: " + e.getMessage());
+        }
+    }
+
     static class Votacion {
         private String pregunta;
         private List<String> opciones;
@@ -150,6 +207,17 @@
         }
     }
 
+    public static void verificarVotaciones() {
+        if (!Files.exists(Paths.get(NOMBRE_ARCHIVO))) {
+            try {
+                Files.createFile(Paths.get(NOMBRE_ARCHIVO));
+                System.out.println("Archivo de votaciones creado correctamente.");
+            } catch (IOException e) {
+                System.err.println("Error al crear el archivo de votaciones: " + e.getMessage());
+            }
+        }
+    }
+
     public static int leerEntero(Scanner scanner, String mensaje) {
         int numero = 0;
         boolean entradaValida = false;
@@ -168,6 +236,4 @@
         return numero;
     }
 
-}
-
-
+}
\ No newline at end of file
Index: src/test/java/org/example/MainTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/org/example/MainTest.java b/src/test/java/org/example/MainTest.java
new file mode 100644
--- /dev/null	(date 1713738737487)
+++ b/src/test/java/org/example/MainTest.java	(date 1713738737487)
@@ -0,0 +1,23 @@
+package org.example;
+
+import static org.junit.jupiter.api.Assertions.*;
+import org.junit.jupiter.api.Test;
+import java.util.HashMap;
+import java.util.Map;
+
+class MainTest {
+
+    @Test
+    void testValidarUsuarioCorrecto() {
+        Map<String, String> usuariosContraseñas = new HashMap<>();
+        usuariosContraseñas.put("123456789", "contraseña1");
+        assertTrue(Main.validarUsuario("123456789", "contraseña1", usuariosContraseñas));
+    }
+
+    @Test
+    void testValidarUsuarioIncorrecto() {
+        Map<String, String> usuariosContraseñas = new HashMap<>();
+        usuariosContraseñas.put("123456789", "contraseña1");
+        assertFalse(Main.validarUsuario("123456789", "contraseñaIncorrecta", usuariosContraseñas));
+    }
+}
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"ff21c83c-96b9-4566-80e3-f017a6af6ca5\" name=\"Changes\" comment=\"Se crea votacion, de momento se guardara en la memoria\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/Main.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/Main.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\"><![CDATA[{\r\n  \"associatedIndex\": 8\r\n}]]></component>\r\n  <component name=\"ProjectId\" id=\"2fQ956x8E6jp4uUZnogsnwNTWEy\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"Application.Main.executor\": \"Run\",\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"SHARE_PROJECT_CONFIGURATION_FILES\": \"true\",\r\n    \"git-widget-placeholder\": \"master\",\r\n    \"kotlin-language-version-configured\": \"true\"\r\n  }\r\n}]]></component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"ff21c83c-96b9-4566-80e3-f017a6af6ca5\" name=\"Changes\" comment=\"\" />\r\n      <created>1713722250088</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1713722250088</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Simple commit\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713722469419</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713722469419</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Ingreso de usuarios\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713723696075</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713723696075</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"se validaba al usuario1 con la contraseña2, corregido con hashmap(similar a un diccionario en python)\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713724584861</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713724584861</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"se valida al usuario y se le muestra un menu para elegir si votar o crear una votacion\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713726010219</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713726010219</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"Se crea votacion, de momento se guardara en la memoria\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713731322578</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713731322578</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"6\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Simple commit\" />\r\n    <MESSAGE value=\"Ingreso de usuarios\" />\r\n    <MESSAGE value=\"se validaba al usuario1 con la contraseña2, corregido con hashmap(similar a un diccionario en python)\" />\r\n    <MESSAGE value=\"se valida al usuario y se le muestra un menu para elegir si votar o crear una votacion\" />\r\n    <MESSAGE value=\"Se crea votacion, de momento se guardara en la memoria\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Se crea votacion, de momento se guardara en la memoria\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 3fcf3fc36d14a9611c5ff8ad58c3cadd9295db82)
+++ b/.idea/workspace.xml	(date 1713739599519)
@@ -5,20 +5,34 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="ff21c83c-96b9-4566-80e3-f017a6af6ca5" name="Changes" comment="Se crea votacion, de momento se guardara en la memoria">
+      <change afterPath="$PROJECT_DIR$/src/test/java/org/example/MainTest.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pom.xml" beforeDir="false" afterPath="$PROJECT_DIR$/pom.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/org/example/Main.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/Main.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
     <option name="LAST_RESOLUTION" value="IGNORE" />
+  </component>
+  <component name="FileTemplateManagerImpl">
+    <option name="RECENT_TEMPLATES">
+      <list>
+        <option value="JUnit5 Test Class" />
+      </list>
+    </option>
   </component>
   <component name="Git.Settings">
+    <option name="RECENT_BRANCH_BY_REPOSITORY">
+      <map>
+        <entry key="$PROJECT_DIR$" value="Tenorio" />
+      </map>
+    </option>
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
   </component>
-  <component name="ProjectColorInfo"><![CDATA[{
-  "associatedIndex": 8
-}]]></component>
+  <component name="ProjectColorInfo">{
+  &quot;associatedIndex&quot;: 8
+}</component>
   <component name="ProjectId" id="2fQ956x8E6jp4uUZnogsnwNTWEy" />
   <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
   <component name="ProjectViewState">
@@ -28,13 +42,32 @@
   <component name="PropertiesComponent"><![CDATA[{
   "keyToString": {
     "Application.Main.executor": "Run",
+    "JUnit.MainTest.executor": "Run",
     "RunOnceActivity.OpenProjectViewOnStart": "true",
     "RunOnceActivity.ShowReadmeOnStart": "true",
     "SHARE_PROJECT_CONFIGURATION_FILES": "true",
-    "git-widget-placeholder": "master",
-    "kotlin-language-version-configured": "true"
+    "com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrary": "JUnit5",
+    "com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrarySuperClass.JUnit5": "",
+    "git-widget-placeholder": "Angelo",
+    "kotlin-language-version-configured": "true",
+    "last_opened_file_path": "C:/Users/angel/IdeaProjects/CalculadoraCompartida"
   }
 }]]></component>
+  <component name="RecentsManager">
+    <key name="CreateTestDialog.Recents.Supers">
+      <recent name="" />
+    </key>
+    <key name="CreateTestDialog.RecentsKey">
+      <recent name="org.example" />
+    </key>
+  </component>
+  <component name="SharedIndexes">
+    <attachedChunks>
+      <set>
+        <option value="jdk-21.0.2-openjdk-21.0.2-4caba194b151-4f524021" />
+      </set>
+    </attachedChunks>
+  </component>
   <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
   <component name="TaskManager">
     <task active="true" id="Default" summary="Default task">
